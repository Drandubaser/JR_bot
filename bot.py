import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from personalities import personalities
from gpt import ChatGptService
from util import (
    load_message,
    load_prompt,
    send_text_buttons,
    send_text,
    send_image,
    show_main_menu,
    Dialog,
    default_callback_handler,
)

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHATGPT_TOKEN = os.getenv("CHATGPT_TOKEN")

chat_gpt = ChatGptService(CHATGPT_TOKEN)
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    dialog.mode = 'main'
    dialog.correct_answers = 0
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'truefalse': '–ò–≥—Ä–∞ "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å" üé≤'
    })


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞."""
    if dialog.mode == "gpt" or dialog.mode == "talk":
        await gpt_dialog(update, context)
    elif dialog.mode == 'quiz':
        await quiz_answer(update, context)
    else:
        await start(update, context)


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç."""
    prompt = load_prompt("random")
    await send_image(update, context, "random")
    answer = await chat_gpt.send_question(prompt, "")
    await send_text_buttons(
        update, context, answer, {"random": "–£–∑–Ω–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç üß†"}
    )


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ —Å ChatGPT."""
    dialog.mode = "gpt"
    prompt = load_prompt("gpt")
    message = load_message("gpt")
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, "gpt")
    await send_text(update, context, message)


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –±–µ—Å–µ–¥—ã."""
    dialog.mode = "choose_personality"
    message = load_message("talk")
    await send_image(update, context, "talk")
    buttons = {}
    for key, value in personalities.items():
        buttons[key] = value["name"]
    await send_text_buttons(update, context, message, buttons)


async def talk_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice in personalities:
        prompt_file = personalities[choice]['prompt_file']
        prompt = load_prompt(prompt_file)
        chat_gpt.set_prompt(prompt)
        dialog.mode = 'talk'
        dialog.person_name = personalities[choice]['name'].split(' - ')[0]
        await send_image(update, context, choice)
        await send_text(update, context, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {personalities[choice]['name']}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.")
    else:
        await send_text(update, context, "–í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å ChatGPT –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é."""
    text = update.message.text
    if dialog.mode == 'talk' and dialog.person_name:
        thinking_message = f"{dialog.person_name} –¥—É–º–∞–µ—Ç..."
    else:
        thinking_message = "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."
    message = await send_text(update, context, thinking_message)
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)


async def random_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞."""
    await update.callback_query.answer()
    await random_fact(update, context)


async def quiz_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É."""
    dialog.mode = "choose_quiz_topic"
    dialog.correct_answers = 0
    message = load_message('quiz')
    await send_image(update, context, 'quiz')
    buttons = {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python üêç',
        'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏ üìê',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è üß¨'
    }
    await send_text_buttons(update, context, message, buttons)


async def quiz_topic_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice in ['quiz_prog', 'quiz_math', 'quiz_biology']:
        dialog.mode = 'quiz'
        dialog.quiz_topic = choice
        prompt = load_prompt('quiz')
        chat_gpt.set_prompt(prompt)
        question = await chat_gpt.add_message(choice)
        await send_text(update, context, question)
    else:
        await send_text(update, context, "–ù–µ—Ç —Ç–∞–∫–æ–π —Ç–µ–º—ã.")


async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    user_answer = update.message.text
    result = await chat_gpt.add_message(user_answer)
    if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" in result:
        dialog.correct_answers += 1
    await send_text_buttons(update, context, f"{result}\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {dialog.correct_answers}", {
        'quiz_more': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å üîÑ',
        'quiz_exit': '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üèÅ'
    })


async def quiz_next_or_exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice == 'quiz_more':
        question = await chat_gpt.add_message('quiz_more')
        await send_text(update, context, question)
    elif choice == 'quiz_exit':
        await send_text(update, context, f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {dialog.correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        dialog.mode = None
        await start(update, context)
    else:
        await send_text(update, context, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


async def truefalse_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å"."""
    dialog.mode = 'truefalse'
    dialog.truefalse_score = 0
    prompt = load_prompt('truefalse')
    message = load_message('truefalse')
    chat_gpt.reset_messages()
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'truefalse')
    await send_text(update, context, message)
    await truefalse_next_statement(update, context)


async def truefalse_next_statement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    statement = await chat_gpt.add_message('next')
    dialog.truefalse_current_statement = statement
    await send_text_buttons(update, context, statement, {
        'truefalse_true': '–ü—Ä–∞–≤–¥–∞ ‚úÖ',
        'truefalse_false': '–õ–æ–∂—å ‚ùå'
    })


async def truefalse_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å"."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice == 'truefalse_true':
        user_answer = '–ü—Ä–∞–≤–¥–∞'
    elif choice == 'truefalse_false':
        user_answer = '–õ–æ–∂—å'
    else:
        await send_text(update, context, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return
    result = await chat_gpt.add_message(user_answer)
    if "–í–µ—Ä–Ω–æ!" in result:
        dialog.truefalse_score += 1
    await send_text_buttons(update, context, f"{result}\n\n–í–∞—à —Å—á—ë—Ç: {dialog.truefalse_score}", {
        'truefalse_next': '–°–ª–µ–¥—É—é—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚ñ∂Ô∏è',
        'truefalse_exit': '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É üõë'
    })


async def truefalse_next_or_exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice == 'truefalse_next':
        await truefalse_next_statement(update, context)
    elif choice == 'truefalse_exit':
        await send_text(update, context, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {dialog.truefalse_score}.")
        dialog.mode = None
        await start(update, context)
    else:
        await send_text(update, context, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


dialog = Dialog()
dialog.mode = None


app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("random", random_fact))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("talk", talk))
app.add_handler(CommandHandler("quiz", quiz_start))
app.add_handler(CommandHandler('truefalse', truefalse_start))


app.add_handler(MessageHandler(filters.TEXT, text_handler))

app.add_handler(CallbackQueryHandler(random_button, pattern="^random$"))
app.add_handler(CallbackQueryHandler(talk_choice, pattern="^talk_.*"))
app.add_handler(CallbackQueryHandler(quiz_topic_choice, pattern='^quiz_(prog|math|biology)$'))
app.add_handler(CallbackQueryHandler(quiz_next_or_exit, pattern='^(quiz_more|quiz_exit)$'))
app.add_handler(CallbackQueryHandler(truefalse_answer, pattern='^truefalse_(true|false)$'))
app.add_handler(CallbackQueryHandler(truefalse_next_or_exit, pattern='^truefalse_(next|exit)$'))
app.add_handler(CallbackQueryHandler(default_callback_handler))

app.run_polling()
